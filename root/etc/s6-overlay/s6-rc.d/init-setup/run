#!/command/with-contenv bash
# shellcheck shell=bash

umask "${UMASK}"

mask() {
    local n=3
    [[ ${#1} -le 5 ]] && n=$(( ${#1} - 3 ))
    local a="${1:0:${#1}-n}"
    local b="${1:${#1}-n}"
    printf "%s%s\n" "${a//?/*}" "$b"
}

#IMAGE_STATS=ewogICJhcHAiOiAicWJpdHRvcnJlbnQiLAogICJpbWFnZSI6ICJob3Rpby9xYml0dG9ycmVudDpyZWxlYXNlIiwKICAicmV2aXNpb24iOiAiMzcwYjNhNiIsCiAgInZlcnNpb24iOiAiNC42LjMiCn0K
image=$(jq -r '.image' <<< "$(base64 --decode <<< "${IMAGE_STATS}")")
branch=$(awk -F ':' '{print $2}' <<< "${image}")
repo=$(awk -F ':' '{print $1}' <<< "${image}")
revision=$(jq -r '.revision' <<< "$(base64 --decode <<< "${IMAGE_STATS}")")
latest_revision=$(curl -fsL "https://raw.githubusercontent.com/${repo}/master/tags.json" | jq -r '.'"${branch}"'.tags[2]' 2> /dev/null | awk -F '-' '{print $2}')
revision_status=$(curl -fsL "https://api.github.com/repos/${repo}/compare/${latest_revision}...${revision}" | jq -r 'if (.behind_by | length) != 0 then "(\(.status), by \(.behind_by))" else empty end')

echo "
$(figlet "hotio")
Donate:        https://hotio.dev/donate
Documentation: https://hotio.dev$(jq -r 'if .app != "" then "/containers/\(.app)" else empty end' <<< "$(base64 --decode <<< "${IMAGE_STATS}")")
Support:       https://hotio.dev/discord
Image:         ${image}
Revision:      ${revision} ${revision_status}
Version:       $(jq -r '.version' <<< "$(base64 --decode <<< "${IMAGE_STATS}")")

----------------------------------------------------------------------
ENVIRONMENT BASE
----------------------------------------------------------------------
PUID=${PUID}
PGID=${PGID}
UMASK=${UMASK}
TZ=${TZ}
VPN_ENABLED=${VPN_ENABLED}
VPN_PROVIDER=${VPN_PROVIDER}
VPN_LAN_NETWORK=${VPN_LAN_NETWORK}
VPN_CONF=${VPN_CONF}
VPN_ADDITIONAL_PORTS=${VPN_ADDITIONAL_PORTS}
VPN_AUTO_PORT_FORWARD=${VPN_AUTO_PORT_FORWARD}
VPN_KEEP_LOCAL_DNS=${VPN_KEEP_LOCAL_DNS}
VPN_PIA_USER=$(mask "${VPN_PIA_USER}")
VPN_PIA_PASS=$(mask "${VPN_PIA_PASS}")
VPN_PIA_PREFERRED_REGION=${VPN_PIA_PREFERRED_REGION}
PRIVOXY_ENABLED=${PRIVOXY_ENABLED}
----------------------------------------------------------------------
"

echo "Executing usermod..."
mkdir "/tmp/temphome"
usermod -d "/tmp/temphome" hotio
usermod -o -u "${PUID}" hotio
usermod -d "${CONFIG_DIR}" hotio
rm -rf "/tmp/temphome"
groupmod -o -g "${PGID}" hotio

echo "Applying permissions to ${CONFIG_DIR}"
chmod "=rwx" "${CONFIG_DIR}"
find "${CONFIG_DIR}" -maxdepth 0 \( ! -user hotio -or ! -group hotio \) -exec chown hotio:hotio {} +
